import logging
from typing import Dict, List
from datetime import datetime

class GoogleDorker:
    def __init__(self, target: str):
        self.target = target
        self.logger = logging.getLogger(__name__)
        
        # Configure logging
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )

    def generate_dorks(self) -> Dict[str, List[str]]:
        """Generate Google dorks for the target"""
        dorks = {
            "Site Search": [
                f'site:{self.target}',
                f'site:{self.target} inurl:admin',
                f'site:{self.target} inurl:login',
                f'site:{self.target} inurl:wp-content',
                f'site:{self.target} inurl:wp-admin',
                f'site:{self.target} inurl:administrator',
                f'site:{self.target} inurl:phpmyadmin',
                f'site:{self.target} inurl:server-status',
                f'site:{self.target} inurl:config'
            ],
            "File Types": [
                f'site:{self.target} filetype:pdf',
                f'site:{self.target} filetype:doc',
                f'site:{self.target} filetype:docx',
                f'site:{self.target} filetype:xls',
                f'site:{self.target} filetype:xlsx',
                f'site:{self.target} filetype:txt',
                f'site:{self.target} filetype:csv',
                f'site:{self.target} filetype:sql',
                f'site:{self.target} filetype:log'
            ],
            "Configuration Files": [
                f'site:{self.target} ext:env',
                f'site:{self.target} ext:config',
                f'site:{self.target} ext:conf',
                f'site:{self.target} ext:ini',
                f'site:{self.target} ext:xml',
                f'site:{self.target} ext:json',
                f'site:{self.target} ext:yaml',
                f'site:{self.target} ext:yml'
            ],
            "Sensitive Information": [
                f'site:{self.target} intext:"password"',
                f'site:{self.target} intext:"username"',
                f'site:{self.target} intext:"api key"',
                f'site:{self.target} intext:"secret"',
                f'site:{self.target} intext:"token"',
                f'site:{self.target} intext:"credential"',
                f'site:{self.target} intext:"private"',
                f'site:{self.target} intext:"confidential"'
            ],
            "Directory Listings": [
                f'site:{self.target} intext:"index of"',
                f'site:{self.target} intext:"directory listing"',
                f'site:{self.target} intext:"parent directory"',
                f'site:{self.target} intext:"last modified"'
            ],
            "Error Messages": [
                f'site:{self.target} intext:"error" intext:"warning"',
                f'site:{self.target} intext:"exception"',
                f'site:{self.target} intext:"stack trace"',
                f'site:{self.target} intext:"debug"'
            ]
        }
        return dorks

    def generate_report(self, dorks: Dict[str, List[str]]) -> str:
        """Generate a human-readable report of the Google dorks"""
        report = f"Google Dorks Report for {self.target}\n"
        report += "=" * 50 + "\n\n"
        
        for category, dork_list in dorks.items():
            report += f"{category}:\n"
            report += "-" * 20 + "\n"
            for dork in dork_list:
                report += f"- {dork}\n"
                report += f"  URL: https://www.google.com/search?q={dork.replace(' ', '+')}\n"
            report += "\n"
        
        return report 