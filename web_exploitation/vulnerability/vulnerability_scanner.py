import requests
import logging
from typing import Dict, List, Optional
from urllib.parse import urljoin, urlparse

class VulnerabilityScanner:
    def __init__(self, target_url: str):
        self.target_url = target_url
        self.logger = logging.getLogger(__name__)
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s'
        )
        self.xss_payloads = [
            "<script>alert('XSS')</script>",
            "\"'><script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg/onload=alert('XSS')>",
            "';alert(String.fromCharCode(88,83,83))//",
            "<iframe srcdoc=\"<script>alert('XSS')</script>\">",
            "<body onload=alert('XSS')>",
            "<div onmouseover=\"alert('XSS')\">Hover over me</div>",
            "<a href=\"javascript:alert('XSS')\">Click me</a>"
        ]

    def _check_xss(self, url: str, param: str, payload: str) -> bool:
        """Helper to check for XSS vulnerability with a specific payload."""
        try:
            test_url = f"{url}?{param}={payload}"
            response = requests.get(test_url, timeout=5)
            if payload in response.text:
                return True
            return False
        except requests.exceptions.RequestException as e:
            self.logger.error(f"XSS check error for {test_url}: {e}")
            return False

    def scan_xss(self) -> List[Dict]:
        """Scans for XSS vulnerabilities."""
        vulnerabilities = []
        try:
            parsed_url = urlparse(self.target_url)
            base_url = f"{parsed_url.scheme}://{parsed_url.netloc}{parsed_url.path}"
            
            # Find parameters in query string
            query_params = parsed_url.query.split('&')
            params = {}
            for param in query_params:
                if '=' in param:
                    key, _ = param.split('=', 1)
                    params[key] = '' # Value doesn't matter for initial param extraction

            if not params:
                self.logger.info(f"No query parameters found in {self.target_url} for XSS scanning.")
                return vulnerabilities
            
            for param_name in params.keys():
                for payload in self.xss_payloads:
                    if self._check_xss(base_url, param_name, payload):
                        vulnerabilities.append({
                            'vulnerability': 'XSS',
                            'url': self.target_url,
                            'parameter': param_name,
                            'payload_used': payload,
                            'recommendation': 'Sanitize user input before rendering it in the HTML. Consider using Content Security Policy (CSP).'
                        })
                        self.logger.warning(f"XSS vulnerability found: {self.target_url} with parameter {param_name} and payload {payload}")
                        # Stop at first successful payload for this parameter
                        break 
        except Exception as e:
            self.logger.error(f"Error during XSS scan: {e}")
        return vulnerabilities

    def run_all_scans(self) -> Dict:
        """Run all vulnerability scans and return combined results."""
        results = {
            'target_url': self.target_url,
            'xss_vulnerabilities': self.scan_xss()
        }
        return results

    def generate_report(self, scan_results: Dict) -> str:
        """Generates a human-readable report of the vulnerability scan results."""
        report = f"Vulnerability Scan Report for {scan_results['target_url']}\n"
        report += "=" * 50 + "\n\n"

        report += "XSS Vulnerabilities:\n"
        report += "-" * 20 + "\n"
        xss_vulns = scan_results.get('xss_vulnerabilities', [])
        if xss_vulns:
            for i, vuln in enumerate(xss_vulns):
                report += f"Vulnerability {i+1}:\n"
                report += f"  Type: {vuln['vulnerability']}\n"
                report += f"  URL: {vuln['url']}\n"
                report += f"  Parameter: {vuln['parameter']}\n"
                report += f"  Payload Used: {vuln['payload_used']}\n"
                report += f"  Recommendation: {vuln['recommendation']}\n\n"
        else:
            report += "No XSS vulnerabilities detected.\n"
        
        return report 